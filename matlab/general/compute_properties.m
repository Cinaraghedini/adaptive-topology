% filename: compute_properties.m
% Purpose:  computes the topological properties of a network 
% Input: 
% - position - x and y coordinates for each network agent
% - param - parametrization struct
% - options - graph options (set the parametrization for graph properties
% computation
% Output: 
% - properties - matrix (1,m) where m is the number of properties evaluated
% - properties(1,1) = global efficiency
% - properties(1,2) = local efficiency
% - properties(1,3) = cluster coefficient
% - properties(1,4) = weighted cluster coefficient
% - properties(1,5) = algebraic_connectivity
% - properties(1,6) =  giant component 
% - properties(1,7) =  average degree
% - properties(1,8) = network robustness    
% - properties(1,9) = the giant component generated by the network disconnection

function properties = compute_properties(position,options,param)

distance = squareform(pdist(position,'euclidean')); % computes the euclidean distance of every pair of nodes

[m mw mwI] = initialize_matrix(distance,param,options); % initialize graph matrices

matE=double(m);

matE=matE.*distance;  %matrix of weights 

g=graph; % create a graph structure

set_matrix(g,m); % set the graph g according to the adjacency matrix m

properties = zeros(1,9); % initialize properties matrix

if nv(g) > 1 % if there is more than one node into the network  
    
    properties(1,1) = eGlobal(matE,distance,1); % global efficiency computation
    
    properties(1,2) = eLocal(m,mw,options); % local efficiency computation
    
    properties(1,3) = clusterCoefficientGraph(g); % network cluster coefficient
    
    properties(1,4) = sum(weighted_clust_coeff(mw))/nv(g); %  network weighted cluster coefficient
    
    properties(1,5) = algebraic_connectivity_New(mw,param.normalized); % algebraic connectivity - not normalized = 0, normalized=1
    
    properties(1,6) = (max(subgrafosSize(g))/nv(g)); % giant component - proportion of node into the giant component
    
    properties(1,7) = sum(deg(g))/nv(g); % network average degree
    
    properties(1,8:9) = robustness(position,param,options); %network robustness    
    
end

free(g); 