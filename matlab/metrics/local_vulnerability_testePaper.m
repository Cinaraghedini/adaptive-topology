function vN=local_vulnerability_testePaper(data,param)

vN=[];
dds=[];
for i=1:size(data,1)

    node=data{i,1}{1,1};
     
    nNeighbors=size(data{i,1},1);
    
    if nNeighbors > 0
    
        dds=[];
        
        for j=1:nNeighbors  % neighbors
           nodeBridge=[];
           nodeBridge(1:size(data{i,1}{j,3}),1)=data{i,1}{j,2};
           dds=[dds; data{i,1}{j,3} nodeBridge]; 
        end
            
    end
    
    countNodes=[];
    if ~isempty(dds)
        
        idNodes=transpose(unique(dds(:,1)));
        
        vulnerable=[];
        
        for j=idNodes
            if isempty(find(data{i,1}{1,3}==j)) && j~=node % se não é vizinho direto do nodo
                nodesPath=find(dds(:,1)==j);
                if size(nodesPath,1) < param.nrPaths 
                    for k=1:size(nodesPath,1)
                        vulnerable = [vulnerable; dds(nodesPath(k),:)];
                    end
                    
                end
            end
        end
   
        
        if param.theta==1 %random number
            vulnerability_threshold=rand;
        else
            vulnerability_threshold=param.theta;
        end
            
        reach=size(idNodes,2);
        countVulnerable=size(vulnerable,1);
        vN=[vN;i countVulnerable/reach];
        
    end
    
end
        