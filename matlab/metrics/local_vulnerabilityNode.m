function vulnerable_T=local_vulnerabilityNode(data,set)

for i=1:size(data,1)

    vulnerable_T=1;
    
    node=data{i,1}{1,1};
     
    nNeighbors=size(data{i,1}{1,3},2);

    dds=[];
    
    if nNeighbors > 0
    
        for j=2:nNeighbors+1  % neighbors
           nodeBridge=[];
           nodeBridge(1:size(data{i,1}{j,3}),1)=data{i,1}{j,1};
           dds=[dds; [ cell2mat(data{i,1}(j,1:2)) data{i,1}{j,1}]; [data{i,1}{j,3} nodeBridge]]; 
        end
            
    end

    if ~isempty(dds)
        
        idNodes=transpose(unique(dds(:,1)));
        
        vulnerable=[];
        
        for j=idNodes
            if isempty(find(data{i,1}{1,3}==j)) && j~=node % se não é vizinho direto do nodo
                nodesPath=find(dds(:,1)==j);
                if size(nodesPath,1) < set.nrPaths 
                    for k=1:size(nodesPath,1)
                        vulnerable = [vulnerable; dds(nodesPath(k),:)];
                    end
                    
                end
            end
        end
        
        if ~isempty(vulnerable)
            reach=size(idNodes,2);
            countVulnerable=size(vulnerable,1);
            vulnerable_T = 1-(countVulnerable/reach);
       end
    end    
end
        