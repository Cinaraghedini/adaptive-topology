function vN=local_vulnerability_vdist(position,param)

[data] = create_Ninf_vdist(position,param); % global

vN=[];
dds=[];
for i=1:size(data,1)

    node=data{i,1}{1,1};
     
    posN=data{i,1}{1,2};
    
    nNeighbors=size(data{i,1}{1,3},2);

    dds=[];
    
     if nNeighbors > 0
    
        for j=2:nNeighbors+1  % neighbors
           nodeBridge=[];
           nodeBridge(1:size(data{i,1}{j,3}),1)=data{i,1}{j,1};
           dds=[dds; [ cell2mat(data{i,1}(j,1:2)) data{i,1}{j,1}]; [data{i,1}{j,3} nodeBridge]]; 
        end
            
    end
    
    countNodes=[];
    if ~isempty(dds)
        
        idNodes=transpose(unique(dds(:,1)));
        
        vulnerable=[];
        
        for j=idNodes
            if isempty(find(data{i,1}{1,3}==j)) && j~=node % se não é vizinho direto do nodo
                nodesPath=find(dds(:,1)==j);
                if size(nodesPath,1) < param.nrPaths 
                    for k=1:size(nodesPath,1)
                        posJ=dds(nodesPath(k),2:3);
                        idxV=find(cell2mat(data{i,1}(:,1))==dds(nodesPath(k),4));
                        if isempty(idxV)
                           posV=data{i,1}{idxV(1,1),2};
                           dist1H = squareform(pdist([posJ;posV],'euclidean')); 
                           dist2H = squareform(pdist([posJ;data{i,1}{1,2}],'euclidean'));  
                           vulnerable = [vulnerable; dds(nodesPath(k),:) dist1H(1,2) data{i,1}{idxV(1,1),4} dist2H(1,2)];
                        end
                    end
                    
                end
            end
        end
        
        if ~isempty(vulnerable)
            reach=size(idNodes,2);
            countVulnerable=size(vulnerable,1);
            vN=[vN; {node  data{i,1}{1,2} vulnerable} countVulnerable/reach];            
        end     
        
    end
    
end
        