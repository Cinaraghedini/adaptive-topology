function vN=local_vulnerability_new_2(data,param)

vN=[];
dds=[];
for i=1:size(data,1)

    node=data{i,1}{1,1};
     
    nNeighbors=size(data{i,1}{1,3},2);
    
    if nNeighbors > 0
    
        dds=[];
        
        for j=2:nNeighbors+1  % neighbors
           nodeBridge=[];
           nodeBridge(1:size(data{i,1}{j,3}),1)=data{i,1}{j,1};
           dds=[dds; [ cell2mat(data{i,1}(j,1:2)) data{i,1}{j,1}]; [data{i,1}{j,3} nodeBridge]]; 
        end
            
        
        countNodes=[];
        if ~isempty(dds)
            
            idNodes=transpose(unique(dds(:,1)));
            
            vulnerable=[];
            
            for j=idNodes
                if isempty(find(data{i,1}{1,3}==j)) %if it is the 2hop neigbhoor
                    nodesPath=find(dds(:,1)==j);
                    if size(nodesPath,1) < param.nrPaths
                        for k=1:size(nodesPath,1)
                            bridgeP=find(cell2mat(data{node,1}(:,1))==dds(nodesPath,4));
                            sharedNeig=data{node,1}{bridgeP,4}(1,2);
                           % vulnerable = [vulnerable; dds(nodesPath(k),:) ((1-sharedNeig)*exp(-sharedNeig))];
                            vulnerable = [vulnerable; dds(nodesPath(k),:) exp(-sharedNeig)];
                        end
                        
                    end
                end
            end
            
            if ~isempty(vulnerable)
                vulnerability=max(vulnerable(:,5));
                if param.theta==1 %random number
                    vulnerability_threshold=rand;
                else
                    vulnerability_threshold=param.theta;
                end
                if vulnerability_threshold < vulnerability
                    vN=[vN; {node  data{i,1}{1,2} vulnerability vulnerable}];
                end
            end
            
            
        end

    end
end
        